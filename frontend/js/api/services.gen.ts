// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  ChatChatCreateData,
  ChatChatCreateResponse,
  CounterIncrementCreateData,
  CounterIncrementCreateResponse,
  RestRestCheckRetrieveResponse,
  TestResponseListData,
  TestResponseListResponse,
  TestResponseCreateData,
  TestResponseCreateResponse,
  TestResponseRetrieveData,
  TestResponseRetrieveResponse,
  TestResponseUpdateData,
  TestResponseUpdateResponse,
  TestResponsePartialUpdateData,
  TestResponsePartialUpdateResponse,
  TestResponseDestroyData,
  TestResponseDestroyResponse,
  TestResponseFetchByKeywordCreateData,
  TestResponseFetchByKeywordCreateResponse,
  UsersListData,
  UsersListResponse,
  UsersCreateData,
  UsersCreateResponse,
  UsersRetrieveData,
  UsersRetrieveResponse,
  UsersUpdateData,
  UsersUpdateResponse,
  UsersPartialUpdateData,
  UsersPartialUpdateResponse,
  UsersDestroyData,
  UsersDestroyResponse,
} from "./types.gen";

export class ChatService {
  /**
   * Gemini Chat Conversation Turn
   * Sends a new message and previous history to Gemini, returning the model's response and the updated history.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ChatResponse
   * @throws ApiError
   */
  public static chatChatCreate(
    data: ChatChatCreateData,
  ): CancelablePromise<ChatChatCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/chat/chat/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class CounterService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Counter
   * @throws ApiError
   */
  public static counterIncrementCreate(
    data: CounterIncrementCreateData = {},
  ): CancelablePromise<CounterIncrementCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/counter/increment/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class RestService {
  /**
   * Check REST API
   * This endpoint checks if the REST API is working.
   * @returns Message
   * @throws ApiError
   */
  public static restRestCheckRetrieve(): CancelablePromise<RestRestCheckRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/rest/rest-check/",
    });
  }
}

export class TestResponseService {
  /**
   * @param data The data for the request.
   * @param data.limit Number of results to return per page.
   * @param data.offset The initial index from which to return the results.
   * @returns PaginatedMockResponseList
   * @throws ApiError
   */
  public static testResponseList(
    data: TestResponseListData = {},
  ): CancelablePromise<TestResponseListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/test-response/",
      query: {
        limit: data.limit,
        offset: data.offset,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MockResponse
   * @throws ApiError
   */
  public static testResponseCreate(
    data: TestResponseCreateData,
  ): CancelablePromise<TestResponseCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/test-response/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this mock response.
   * @returns MockResponse
   * @throws ApiError
   */
  public static testResponseRetrieve(
    data: TestResponseRetrieveData,
  ): CancelablePromise<TestResponseRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/test-response/{id}/",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this mock response.
   * @param data.requestBody
   * @returns MockResponse
   * @throws ApiError
   */
  public static testResponseUpdate(
    data: TestResponseUpdateData,
  ): CancelablePromise<TestResponseUpdateResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/test-response/{id}/",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this mock response.
   * @param data.requestBody
   * @returns MockResponse
   * @throws ApiError
   */
  public static testResponsePartialUpdate(
    data: TestResponsePartialUpdateData,
  ): CancelablePromise<TestResponsePartialUpdateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/test-response/{id}/",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this mock response.
   * @returns void No response body
   * @throws ApiError
   */
  public static testResponseDestroy(
    data: TestResponseDestroyData,
  ): CancelablePromise<TestResponseDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/test-response/{id}/",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MockResponse
   * @throws ApiError
   */
  public static testResponseFetchByKeywordCreate(
    data: TestResponseFetchByKeywordCreateData,
  ): CancelablePromise<TestResponseFetchByKeywordCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/test-response/fetch_by_keyword/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }
}

export class UsersService {
  /**
   * @param data The data for the request.
   * @param data.limit Number of results to return per page.
   * @param data.offset The initial index from which to return the results.
   * @returns PaginatedUserList
   * @throws ApiError
   */
  public static usersList(
    data: UsersListData = {},
  ): CancelablePromise<UsersListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/",
      query: {
        limit: data.limit,
        offset: data.offset,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User
   * @throws ApiError
   */
  public static usersCreate(
    data: UsersCreateData,
  ): CancelablePromise<UsersCreateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/users/",
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @returns User
   * @throws ApiError
   */
  public static usersRetrieve(
    data: UsersRetrieveData,
  ): CancelablePromise<UsersRetrieveResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @param data.requestBody
   * @returns User
   * @throws ApiError
   */
  public static usersUpdate(
    data: UsersUpdateData,
  ): CancelablePromise<UsersUpdateResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @param data.requestBody
   * @returns User
   * @throws ApiError
   */
  public static usersPartialUpdate(
    data: UsersPartialUpdateData,
  ): CancelablePromise<UsersPartialUpdateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
    });
  }

  /**
   * @param data The data for the request.
   * @param data.id A unique integer value identifying this user.
   * @returns void No response body
   * @throws ApiError
   */
  public static usersDestroy(
    data: UsersDestroyData,
  ): CancelablePromise<UsersDestroyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/users/{id}/",
      path: {
        id: data.id,
      },
    });
  }
}
