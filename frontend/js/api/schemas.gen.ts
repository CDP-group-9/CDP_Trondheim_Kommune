// This file is auto-generated by @hey-api/openapi-ts

export const $ChatRequest = {
  type: "object",
  description: "Defines the expected input structure for the chat API.",
  properties: {
    prompt: {
      type: "string",
      description: "The user's new message to the model.",
      maxLength: 2000,
    },
    history: {
      type: "array",
      items: {
        type: "object",
        additionalProperties: {},
      },
      description:
        "The full conversation history as a list of Content dictionaries.",
    },
    context_text: {
      type: "string",
      nullable: true,
      description:
        "Optional context (e.g., RAG snippets) to augment the prompt.",
      maxLength: 5000,
    },
    system_instructions: {
      type: "string",
      nullable: true,
      description: "Optional instructions to guide the model's persona.",
      maxLength: 1000,
    },
    model_name: {
      type: "string",
      default: "gemini-2.5-flash",
      description: "The Gemini model to use for generation.",
      maxLength: 50,
    },
  },
  required: ["prompt"],
} as const;

export const $ChatResponse = {
  type: "object",
  description: "Defines the expected output structure from the chat API.",
  properties: {
    response: {
      type: "string",
      description: "The model's generated text response.",
    },
    history: {
      type: "array",
      items: {
        type: "object",
        additionalProperties: {},
      },
      description:
        "The full, updated conversation history (including the latest turn).",
    },
  },
  required: ["history", "response"],
} as const;

export const $Checklist = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    result: {
      type: "string",
    },
  },
  required: ["id", "result"],
} as const;

export const $Counter = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    value: {
      type: "integer",
      maximum: 2147483647,
      minimum: -2147483648,
    },
  },
  required: ["id"],
} as const;

export const $Message = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
  },
  required: ["message"],
} as const;

export const $MockResponse = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    response: {
      type: "string",
    },
  },
  required: ["id", "response"],
} as const;

export const $PaginatedChecklistList = {
  type: "object",
  required: ["count", "results"],
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=400&limit=100",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=200&limit=100",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Checklist",
      },
    },
  },
} as const;

export const $PaginatedMockResponseList = {
  type: "object",
  required: ["count", "results"],
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=400&limit=100",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=200&limit=100",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/MockResponse",
      },
    },
  },
} as const;

export const $PaginatedUserList = {
  type: "object",
  required: ["count", "results"],
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=400&limit=100",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=200&limit=100",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
    },
  },
} as const;

export const $PatchedChecklist = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    result: {
      type: "string",
    },
  },
} as const;

export const $PatchedMockResponse = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    response: {
      type: "string",
    },
  },
} as const;

export const $PatchedUser = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    is_active: {
      type: "boolean",
      description:
        "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
    },
    is_staff: {
      type: "boolean",
      description: "Designates whether the user can log into this admin site.",
    },
    is_superuser: {
      type: "boolean",
      title: "Superuser status",
      description:
        "Designates that this user has all permissions without explicitly assigning them.",
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    last_login: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
} as const;

export const $User = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    is_active: {
      type: "boolean",
      description:
        "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
    },
    is_staff: {
      type: "boolean",
      description: "Designates whether the user can log into this admin site.",
    },
    is_superuser: {
      type: "boolean",
      title: "Superuser status",
      description:
        "Designates that this user has all permissions without explicitly assigning them.",
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    last_login: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
  required: ["created", "email", "id", "modified"],
} as const;
